<?php

namespace Application\Core\Models;

use Phalcon\Mvc\Model\Message;

/**
 * Configuration
 *
 * @autogenerated by Phalcon Developer Tools
 * @date 2016-07-17, 19:49:57
 */
class Configuration extends BaseModel
{

    /**
     *
     * @var integer
     */
    public $id;

    /**
     *
     * @var string
     */
    public $key;

    /**
     *
     * @var string
     */
    public $value;

    /**
     *
     * @var string
     */
    public $desc;

    /**
     * Author:Robert
     *
     * @var
     */
    public $createdAt;

    /**
     * @var
     */
    public $updatedAt;

    /**
     * 配置cache key
     */
    const CONFIGURATION_CACHE_KEY = 'application_configuration_611c9a73b0cb8';


    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->setSchema($this->getDi()->get('config')->database->dbname);
        parent::initialize();
        $this->setSource("'configuration'");
    }

    /**
     * 验证器
     *
     * @return bool
     */
    public function validation()
    {
        if (!trim($this->key) || strlen($this->key) > 255) {
            $this->appendMessage(new Message('配置的KEY为0-255个字符'));
            return false;
        }
        $exist = self::hasConfiguration($this->key);
        if ($exist) {
            if (!$this->id) {
                $this->appendMessage(new Message('配置的KEY已经存在'));
                return false;
            } elseif ($exist->id != $this->id) {
                $this->appendMessage(new Message('配置的KEY已经存在'));
                return false;
            }
        }
        return true;
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'configuration';
    }


    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return Configuration[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return Configuration
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * 载入所有配置的常量
     *
     * @return bool
     */
    public static function loadConfigurations()
    {
//        self::makeCache();//调试模式
        $self = new self();
        $cache = $self->getDi()->get('cache');
        $configuration = $cache->get(self::CONFIGURATION_CACHE_KEY);
        if ($configuration) {
            $constants = json_decode($configuration, true);
        } else {
            $constants = self::makeCache();
        }
        foreach ($constants as $constant) {
            if (defined($constant['key']) === false) {
                define($constant['key'], $constant['value']);
            }
        }
        return true;
    }

    /**
     * 生成cache
     *
     * @return mixed
     */
    public static function makeCache()
    {
        $constants = self::find()->toArray();
        $self = new self();
        $cache = $self->getDi()->get('cache');
        $cache->save(self::CONFIGURATION_CACHE_KEY, json_encode($constants));
        return $constants;
    }


    /**
     * 安全读取一个常量
     *
     * @param $key
     * @param bool|true $strict
     * @return mixed|string
     * @throws Exception
     */
    public static function getConfiguration($key, $strict = true)
    {
//        if (defined("self::$key") === true) {
//            return constant("self::$key");
//        }
        if (defined($key) === true) {
            return constant($key);
        }
        if ($strict === true) {
            throw new \Exception("丢失常量配置{$key}，请检查");
        }
        return '';
    }

    /**
     * 是否存在配置
     *
     * @param $key
     * @return bool|Configuration
     */
    public static function hasConfiguration($key)
    {
        $configuration = self::findFirst([
            'conditions' => 'key=:key:',
            'bind' => [
                'key' => $key
            ]
        ]);
        if ($configuration) {
            return $configuration;
        }
        return false;
    }

    /**
     * 添加一个常量
     *
     * @param $key
     * @param $value
     * @param string $desc
     * @return bool
     */
    public function addConfiguration($key, $value, $desc = '')
    {
        if (self::hasConfiguration($key) !== false) {
            $this->appendMessage(new Message('这个常量已经添加过了'));
            return false;
        }
        $this->key = $key;
        $this->value = $value;
        if ($desc) {
            $this->desc = $desc;
        }
        if ($this->save() === false) {
            return false;
        }
        self::makeCache();
        return true;
    }


    /**
     * 更新KEY
     *
     * @param $value
     * @param bool|false $makeCache
     * @return bool
     */
    public function updateConfiguration($value, $makeCache = false)
    {
        $model = $this;
        if ($model->save(['value' => $value])) {
            if ($makeCache === true) {
                self::makeCache();
            }
            return true;
        }
        return false;
    }

    /**
     *
     * @author Robert
     *
     * @return bool
     */
    public function remove()
    {
        if ($this->delete() === false) {
            return false;
        }
        self::makeCache();
        return true;
    }

}
