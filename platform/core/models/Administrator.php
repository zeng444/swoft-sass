<?php

namespace Application\Core\Models;

use Phalcon\Mvc\Model\Message;
use Phalcon\Validation;
use Phalcon\Validation\Validator\Digit as DigitValidator;
use Phalcon\Validation\Validator\InclusionIn as InclusionIn;
use Phalcon\Validation\Validator\StringLength as StringLength;
use Phalcon\Validation\Validator\Between as BetweenValidation;
use Phalcon\Validation\Validator\PresenceOf as PresenceOfValidator;

/**
 * Administrator
 *
 * @autogenerated by Phalcon Developer Tools
 * @date 2016-07-17, 19:49:11
 */
class Administrator extends BaseModel
{

    /**
     *
     * @var integer
     */
    public $id;

    /**
     * Author:Robert
     *
     * @var
     */
    public $wechat_openid;

    /**
     * @var
     */
    public $role_id;

    /**
     *
     * @var string
     */
    public $name;

    /**
     * @var
     */
    public $application_ids;

    /**
     * @var
     */
    public $nickname;

    /**
     * @var
     */
    public $is_block;

    /**
     *
     * @var string
     */
    public $password;

    /**
     * @var
     */
    public $is_deleted;

    /**
     *
     * @var string
     */
    public $createdAt;

    /**
     *
     * @var string
     */
    public $updatedAt;

    /**
     *
     */
    const PASSWORD_SALT = 'jan_pass_611c9a73b13fe';

    /**
     *
     */
    const SUPER_ADMIN_NAME = 'administrator';


    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->setSchema($this->getDi()->get('config')->database->dbname);
        parent::initialize();
        $this->belongsTo('role_id', '\Application\Core\Models\AdministratorRole', 'id', ['alias' => 'AdministratorRole']);
    }

    /**
     * Validations and business logic
     *
     * @return boolean
     */
    public function validation()
    {
        if (mb_strlen($this->name, 'UTF-8') < 4 || mb_strlen($this->name, 'UTF-8') > 16) {
            $this->appendMessage(new Message('账户名不合法，应该为4-16位'));
        }
        $administrator = self::getAdminByName($this->name);
        if ($this->id) {
            if ($administrator && $administrator->id != $this->id) {
                $this->appendMessage(new Message("用户名{ $this->name }已经存在了"));
            }
        } else {
            if ($administrator) {
                $this->appendMessage(new Message("用户名{ $this->name }已经存在了"));
            }
        }
        if (strlen($this->password) != 32) {
            if (self::checkPasswordFormat($this->password) === false) {
                $this->appendMessage(new Message('密码不合法，应该是8-15位字符串'));
            }
            if (self::checkPasswordHealth($this->password) === false) {
                $this->appendMessage(new Message('密码不够强壮，至少包含大小写英文和数字'));
            }
        }
        if ($this->validationHasFailed()) {
            return false;
        }

        $validator = new Validation();

        $validator->add(
            ["role_id", "name"],
            new PresenceOfValidator(
                [
                    "model" => $this,
                    "message" => ":field不能为空",
                ]
            )
        );

        $validator->add(
            ["name", "nickname", "password"],
            new StringLength(
                [
                    "model" => $this,
                    "max" => [
                        "name" => 20,
                        "nickname" => 50,
                        "password" => 32
                    ],
                    "messageMaximum" => [
                        "name" => "用户名格式错误，字符长度应该在1-20之间",
                        "nickname" => "nickname格式错误，字符长度应该在1-50之间",
                        "password" => "用户密码格式错误，字符长度应该在1-32之间"
                    ]
                ]
            )
        );

        $validator->add(
            ["role_id"],
            new BetweenValidation(
                [
                    "model" => $this,
                    "minimum" => [
                        "role_id" => 0
                    ],
                    "maximum" => [
                        "role_id" => 4294967295
                    ],
                    "message" => [
                        "role_id" => "角色格式错误，字符范围应该在0-4294967295之间"
                    ]
                ]
            )
        );

        $validator->add(
            ["role_id"],
            new DigitValidator(
                [
                    "model" => $this,
                    "message" => [
                        "role_id" => ":field格式不合法，应该为整数类型的字符"
                    ],
                ]
            )
        );

        $validator->add(
            ["is_block"],
            new InclusionIn(
                [
                    "model" => $this,
                    "message" => [
                        "is_block" => ":field格式不合法，应该为数字类型的字符"
                    ],
                    "domain" => [
                        "is_block" => [0, 1]
                    ],
                ]
            )
        );

        return $this->validate($validator);
    }


    /**
     * 是否超级管理员
     * @param $name
     * @return bool
     */
    public static function isSuper($name)
    {
        if ($name === self::SUPER_ADMIN_NAME) {
            return true;
        }
        return false;
    }

    /**
     * @param $name
     * @return Administrator
     */
    public static function getAdminByName($name)
    {
        return self::findFirst([
            'conditions' => 'name=:name: and is_deleted=:is_deleted:',
            'bind' => [
                'is_deleted' => 0,
                'name' => $name,
            ]
        ]);
    }

    /**
     *
     * @author Robert
     *
     * @return bool
     */
    public function beforeValidation()
    {
        $this->is_deleted = intval($this->is_deleted);
        $this->is_block = intval($this->is_block);
        if (!trim($this->application_ids)) {
            $this->application_ids = null;
        }
        return true;
    }

    /**
     *
     * @author Robert
     *
     * @param $password
     * @return bool
     */
    public function auth($password)
    {
        if ($this->password != self::encodePassword($password)) {
            $this->appendMessage(new Message('你的密码错误，请检查'));
            return false;
        }
        if ($this->isBlock()) {
            $this->appendMessage(new Message('你的帐号封停中'));
            return false;
        }
        return true;
    }

    /**
     * 加密
     *
     * @param $password
     * @return string
     */
    public static function encodePassword($password)
    {
        return md5($password . self::PASSWORD_SALT);
    }

    /**
     * 保存前执行
     */
    public function beforeSave()
    {
        if (strlen($this->password) != 32) {
            $this->password = self::encodePassword($this->password);
        }
    }

    /**
     * 检查是否有权限访问
     *
     * @param $route
     * @return bool
     */
    public function isAclAllowed($route)
    {
        if (preg_match('/^\//', $route)) {
            $this->appendMessage(new Message('路由地址不能使用分隔符开头'));
            return false;
        }
        if (strpos($route, '/') === false) {
            $route .= '/index';
        }
        $acl = AdministratorRole::getMyAcl($this->role_id);
        if ($acl === false || !$acl) {
            $this->appendMessage(new Message('没有开放功能'));
            return false;
        }
        $acl = array_map('strtolower', $acl);
        if (!in_array(strtolower($route), $acl)) {
            $this->appendMessage(new Message('你没有权限访问此页面请联系管理员'));
            return false;
        }
        return true;
    }

    /**
     * 检查密码是否合法
     *
     * @param $password
     * @return bool
     */
    public static function checkPasswordFormat($password)
    {
        $length = mb_strlen($password, 'UTF-8');
        if ($length < 8 || $length > 15) {
            return false;
        }
        return true;
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'administrator';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return Administrator[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return Administrator
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Author:Robert
     *
     * @param $default
     * @return array|bool|mixed|string
     */
    public function getDefaultAction($default = [])
    {
        $menus = PlatformMenu::menuList($this->id);
        if (!$menus) {
            return $default;
        }
        $menus = current($menus);
        if (!isset($menus['children']) || !$menus['children']) {
            return $default;
        }
        $menus = current($menus['children']);
        if (!isset($menus['link']) || !$menus['link']) {
            return $default;
        }
        $menus = substr($menus['link'], 1, strlen($menus['link']) - 1);
        $menus = explode('/', $menus);
        return $menus;
    }

    /**
     * 是否注册
     *
     * @param $name
     * @return Administrator|bool
     */
    public static function hasRegistered($name)
    {
        $admin = self::findFirst([
            'conditions' => 'name=:name: and is_deleted=:is_deleted:',
            'bind' => [
                'name' => $name,
                'is_deleted' => 0
            ]
        ]);
        if (!$admin) {
            return false;
        }
        return $admin;
    }

    /**
     * 注册管理员
     *
     * @param $role
     * @param $name
     * @param $nickname
     * @param $password
     * @return bool
     */
    public function register($role, $name, $nickname, $password)
    {
        if (self::hasRegistered($name)) {
            $this->appendMessage(new Message('你已经注册过了'));
            return false;
        }
        $this->name = $name;
        $this->is_deleted = 0;
        $this->is_block = 0;
        $this->role_id = $role;
        $this->nickname = $nickname;
        $this->password = $password;
        return $this->save();
    }

    /**
     * 修改个人信息
     *
     * @param $roleId
     * @param $nickname
     * @param $password
     * @param $isBlock
     * @return mixed
     */
    public function changeProfile($roleId, $nickname, $password, $isBlock)
    {
        if ($this->name !== self::SUPER_ADMIN_NAME && $roleId) {
            $this->role_id = $roleId;
        }
        $this->nickname = $nickname;
        if ($password) {
            $this->password = $password;
        }
        if (strlen($isBlock)) {
            $this->is_block = intval($isBlock);
        }
        return $this->save();
    }

    /**
     * 读取帐号
     *
     * @param $id
     * @return Administrator
     */
    public static function getAdministratorById($id)
    {
        return self::findFirst([
            'conditions' => 'id=:id: and is_deleted = :is_deleted:',
            'bind' => [
                'id' => $id,
                'is_deleted' => 0
            ]
        ]);
    }

    /**
     * 密码强度提示
     * @param $password
     * @return string
     */
    public static function checkPasswordHealth($password)
    {
        if (strlen($password) < 8) {
            return false;
        }
        if (!preg_match("/[0-9]+/", $password)) {
            return false;
        }
        if (!preg_match("/[a-z]+/", $password)) {
            return false;
        }
        if (!preg_match("/[A-Z]+/", $password)) {
            return false;
        }
        return true;
    }

    /**
     * 是否封号
     *
     * @return bool
     */
    public function isBlock()
    {
        if ($this->is_block == '1') {
            return true;
        }
        return false;
    }

    /**
     * @return bool
     */
    public function block()
    {
        if ($this->isBlock()) {
            $this->appendMessage(new Message('已经被封号'));
            return false;
        }
        $this->is_block = 1;
        return $this->save();
    }

    /**
     * @return bool
     */
    public function unblock()
    {
        if ($this->isBlock() === false) {
            $this->appendMessage(new Message('帐号正常不需要解封'));
            return false;
        }
        $this->is_block = 0;
        return $this->save();
    }

    /**
     *
     * @author Robert
     *
     * @return bool
     */
    public function beforeDelete()
    {
        if ($this->isSuperAdmin() === true) {
            $this->appendMessage(new Message('超级管理员' . $this->name . '禁止删除'));
            return false;
        }
        return true;
    }

    /**
     *
     * @author Robert
     *
     * @return bool
     */
    public function isSuperAdmin()
    {
        return $this->name === self::SUPER_ADMIN_NAME;
    }

    /**
     *
     * @author Robert
     *
     */
    public function isSuperAdminRole()
    {
        return AdministratorRole::isSuperAdminRole($this->role_id);
    }


    /**
     * Author:Robert
     *
     */
    public function unbindWechat()
    {
        $this->wechat_openid = null;
        return $this->save();
    }

}
